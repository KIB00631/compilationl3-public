/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvarBase(ADecvarBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidBase(AVoidBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecfonctionboucleListdecfonction(ADecfonctionboucleListdecfonction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecfonctionListdecfonction(ADecfonctionListdecfonction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvarInstr(ADecvarInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrtantqueInstr(AInstrtantqueInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstraffectInstr(AInstraffectInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrblocInstr(AInstrblocInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrsiInstr(AInstrsiInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrappelInstr(AInstrappelInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrretourInstr(AInstrretourInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrecritureInstr(AInstrecritureInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrvideInstr(AInstrvideInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrtantque(AInstrtantque node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstraffect(AInstraffect node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListinstrB2(AListinstrB2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrfinB2(AInstrfinB2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrsi(AInstrsi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASinonsiS2(ASinonsiS2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASinonS2(ASinonS2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideS2(AVideS2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrappel(AInstrappel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrretour(AInstrretour node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrecriture(AInstrecriture node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrvide(AInstrvide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADectabDectab(ADectabDectab node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideDectab(AVideDectab node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADectab2Dectab2(ADectab2Dectab2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideDectab2(AVideDectab2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvar(ADecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvar2Decvar2(ADecvar2Decvar2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListdecvarDecvar2(AListdecvarDecvar2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecfonction(ADecfonction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntrblocDecfonction2(AIntrblocDecfonction2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListdecvarDecfonction2(AListdecvarDecfonction2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrbloc(AInstrbloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp2Exp(AExp2Exp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEtExp2(AEtExp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp3Exp2(AExp3Exp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEgalExp3(AEgalExp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInferieurExp3(AInferieurExp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp4Exp3(AExp4Exp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExp4(APlusExp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoinsExp4(AMoinsExp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp5Exp4(AExp5Exp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFoisExp5(AFoisExp5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiviseExp5(ADiviseExp5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp6Exp5(AExp6Exp5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANonExp6(ANonExp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp7Exp6(AExp7Exp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParentheseExp7(AParentheseExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFctExp7(AFctExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANombreExp7(ANombreExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExp7(AVarExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALireExp7(ALireExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFct(AFct node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListeexpListeexp(AListeexpListeexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListeexp(AVideListeexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpbisExpbis(AExpbisExpbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideExpbis(AVideExpbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarVar(AVarVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATabVar(ATabVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSi(TSi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlors(TAlors node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSinon(TSinon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaire(TFaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntier(TEntier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRetour(TRetour node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLire(TLire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEcrire(TEcrire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPointVirgule(TPointVirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMoins(TMoins node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFois(TFois node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivise(TDivise node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParentheseOuvrante(TParentheseOuvrante node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParentheseFermante(TParentheseFermante node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCrochetOuvrant(TCrochetOuvrant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCrochetFermant(TCrochetFermant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAccoladeOuvrante(TAccoladeOuvrante node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAccoladeFermante(TAccoladeFermante node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEgal(TEgal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTantque(TTantque node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInferieur(TInferieur node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEt(TEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOu(TOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNon(TNon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgule(TVirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNombre(TNombre node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentif(TIdentif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
